#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import readline from 'readline';
import { execSync } from 'child_process';
import os from 'os';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt: string): Promise<string> {
  return new Promise(resolve => rl.question(prompt, resolve));
}

async function generateVapidKeys(): Promise<{ publicKey: string; privateKey: string }> {
  console.log('\nüìù Generating VAPID keys...');
  
  try {
    const webpush = await import('web-push');
    const vapidKeys = webpush.default.generateVAPIDKeys();
    return vapidKeys;
  } catch (error) {
    console.log('‚ö†Ô∏è  web-push not found, using basic key generation');
    return {
      publicKey: crypto.randomBytes(65).toString('base64url'),
      privateKey: crypto.randomBytes(32).toString('base64url')
    };
  }
}

function generateAuthToken(): string {
  return crypto.randomBytes(32).toString('hex');
}

interface Config {
  NEXT_PUBLIC_VAPID_PUBLIC?: string;
  VAPID_PRIVATE?: string;
  VAPID_EMAIL?: string;
  ENABLE_AUTH?: string;
  AUTH_TOKEN?: string;
  KV_URL?: string;
  KV_REST_API_URL?: string;
  KV_REST_API_TOKEN?: string;
  KV_REST_API_READ_ONLY_TOKEN?: string;
  PUSH_TTL?: string;
  PUSH_URGENCY?: string;
  MAX_NOTIFICATIONS?: string;
  MAX_SUBSCRIPTIONS?: string;
}

async function setupEnvironment(): Promise<Config | false> {
  console.log('\nüîß Environment Setup\n');
  
  const config: Config = {};
  
  const envPath = path.join(__dirname, '.env.local');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('Found existing .env.local. Overwrite? (y/n): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Keeping existing configuration');
      return false;
    }
  }
  
  console.log('\nüìç Where will you deploy this?');
  console.log('1. Local development only');
  console.log('2. Vercel');
  console.log('3. Other hosting service');
  const deployChoice = await question('Choice (1-3): ');
  
  console.log('\nüîë VAPID Keys Setup');
  const useAutoVapid = await question('Generate VAPID keys automatically? (y/n): ');
  
  if (useAutoVapid.toLowerCase() === 'y') {
    const keys = await generateVapidKeys();
    config.NEXT_PUBLIC_VAPID_PUBLIC = keys.publicKey;
    config.VAPID_PRIVATE = keys.privateKey;
  } else {
    config.NEXT_PUBLIC_VAPID_PUBLIC = await question('Enter VAPID public key: ');
    config.VAPID_PRIVATE = await question('Enter VAPID private key: ');
  }
  
  const email = await question('\nüìß Admin email address: ');
  config.VAPID_EMAIL = `mailto:${email}`;
  
  console.log('\nüîí Authentication Setup');
  const enableAuth = await question('Enable API authentication? (y/n): ');
  config.ENABLE_AUTH = enableAuth.toLowerCase() === 'y' ? 'true' : 'false';
  
  if (config.ENABLE_AUTH === 'true') {
    const useAutoToken = await question('Generate secure auth token automatically? (y/n): ');
    if (useAutoToken.toLowerCase() === 'y') {
      config.AUTH_TOKEN = generateAuthToken();
      console.log(`\n‚ö†Ô∏è  Save this token securely: ${config.AUTH_TOKEN}`);
    } else {
      config.AUTH_TOKEN = await question('Enter auth token: ');
    }
  }
  
  if (deployChoice === '2') {
    console.log('\n‚òÅÔ∏è  Vercel Storage Setup');
    console.log('\n‚ö†Ô∏è  IMPORTANT: You\'ll create the database AFTER deploying to Vercel.');
    console.log('1. Deploy first with \'vercel --prod\'');
    console.log('2. Go to vercel.com/dashboard ‚Üí Your project ‚Üí Storage');
    console.log('3. Click "Create Database" ‚Üí "Upstash" ‚Üí Continue');
    console.log('4. Accept defaults ‚Üí Create');
    console.log('5. It automatically adds KV environment variables');
    console.log('6. Redeploy to apply the database connection\n');
    await question('Press Enter to continue...');
  }
  
  const configureAdvanced = await question('\n‚öôÔ∏è  Configure advanced settings? (y/n): ');
  if (configureAdvanced.toLowerCase() === 'y') {
    config.PUSH_TTL = await question('Push TTL in seconds (default 0): ') || '0';
    config.PUSH_URGENCY = await question('Push urgency (very-low/low/normal/high, default high): ') || 'high';
    config.MAX_NOTIFICATIONS = await question('Max notifications to store (default 100): ') || '100';
    config.MAX_SUBSCRIPTIONS = await question('Max subscriptions (default 1000): ') || '1000';
  }
  
  let envContent = '# Instant Push Configuration\n';
  envContent += '# Generated by setup script\n\n';
  
  for (const [key, value] of Object.entries(config)) {
    if (value) {
      envContent += `${key}=${value}\n`;
    }
  }
  
  fs.writeFileSync(envPath, envContent);
  console.log('\n‚úÖ Created .env.local');
  
  return config;
}

async function setupMCP(authToken?: string): Promise<void> {
  console.log('\nü§ñ MCP Server Setup\n');
  
  const setupMCP = await question('Set up MCP server for Claude Desktop? (y/n): ');
  if (setupMCP.toLowerCase() !== 'y') {
    return;
  }
  
  console.log('\nüìç Where is your Boing server?');
  console.log('1. Local development');
  console.log('2. Deployed to Vercel');
  console.log('3. Custom URL');
  const urlChoice = await question('Choice (1-3): ');
  
  let apiUrl: string;
  switch (urlChoice) {
    case '1':
      const localPort = await question('Enter local port (default 3000): ') || '3000';
      apiUrl = `http://localhost:${localPort}/api/send`;
      break;
    case '2':
      const vercelUrl = await question('Enter your Vercel app URL (e.g., my-app.vercel.app): ');
      apiUrl = `https://${vercelUrl}/api/send`;
      break;
    case '3':
      apiUrl = await question('Enter full API URL: ');
      break;
    default:
      apiUrl = 'http://localhost:3000/api/send';
  }
  
  const platform = os.platform();
  const homeDir = os.homedir();
  let configPath: string;
  
  switch(platform) {
    case 'darwin':
      configPath = path.join(homeDir, 'Library', 'Application Support', 'Claude', 'claude_desktop_config.json');
      break;
    case 'win32':
      configPath = path.join(process.env.APPDATA || path.join(homeDir, 'AppData', 'Roaming'), 'Claude', 'claude_desktop_config.json');
      break;
    default:
      configPath = path.join(homeDir, '.config', 'Claude', 'claude_desktop_config.json');
  }
  
  const configDir = path.dirname(configPath);
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  
  let claudeConfig: any = {};
  if (fs.existsSync(configPath)) {
    try {
      claudeConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    } catch (error) {
      console.log('‚ö†Ô∏è  Could not read existing Claude config, will create new one');
    }
  }
  
  claudeConfig.mcpServers = claudeConfig.mcpServers || {};
  claudeConfig.mcpServers['boing'] = {
    command: 'npx',
    args: ['tsx', path.join(__dirname, 'mcp-server', 'index.ts')],
    env: {
      BOING_API_URL: apiUrl,
      BOING_AUTH_TOKEN: authToken || '<YOUR_AUTH_TOKEN_HERE>'
    }
  };
  
  fs.writeFileSync(configPath, JSON.stringify(claudeConfig, null, 2));
  
  console.log(`\n‚úÖ MCP configuration saved to: ${configPath}`);
  console.log('\nüìù Configuration:');
  console.log(`  API URL: ${apiUrl}`);
  console.log(`  Auth Token: ${authToken ? authToken.substring(0, 10) + '...' : 'Not set'}`);
}

async function installDependencies(): Promise<void> {
  console.log('\nüì¶ Installing dependencies...\n');
  
  try {
    execSync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ Dependencies installed');
    
    console.log('\nüì¶ Installing MCP server dependencies...\n');
    execSync('cd mcp-server && npm install', { stdio: 'inherit' });
    console.log('‚úÖ MCP dependencies installed');
  } catch (error) {
    console.error('‚ö†Ô∏è  Failed to install dependencies. Run npm install manually.');
  }
}

async function main(): Promise<void> {
  console.log('üöÄ Boing Setup\n');
  console.log('This script will help you configure your personal push notification server.\n');
  
  try {
    const installDeps = await question('Install dependencies? (y/n): ');
    if (installDeps.toLowerCase() === 'y') {
      await installDependencies();
    }
    
    const config = await setupEnvironment();
    
    if (config) {
      await setupMCP(config.AUTH_TOKEN);
    }
    
    console.log('\n‚ú® Setup complete!\n');
    console.log('Next steps:');
    console.log('1. Start the development server: npm run dev');
    console.log('2. Visit http://localhost:3000');
    console.log('3. Click "Enable Notifications"');
    
    if (config && config.AUTH_TOKEN) {
      console.log('\nüîë Your auth token for API requests:');
      console.log(`   ${config.AUTH_TOKEN}`);
    }
    
    console.log('\nüìö For deployment instructions, see README.md');
    
  } catch (error: any) {
    console.error('\n‚ùå Setup failed:', error.message);
    process.exit(1);
  } finally {
    rl.close();
  }
}

main();